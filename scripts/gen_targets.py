import argparse
import collections
import os
import os.path
import re
import sys

PATTERN_RULE_RE = r"^(.*)%(.*):\t?(.*)%(.*)$"

Rule = collections.namedtuple('Rule', ['t_prefix', 't_suffix', 'd_prefix', 'd_suffix'])

def parse_make_pattern_rule(s):
    r = re.compile(PATTERN_RULE_RE)
    m = r.match(s)
    if m is None:
        raise ValueError(s)
    return Rule(m.group(1), m.group(2), m.group(3), m.group(4))

def rule_match(rule, dependency):
    r = re.compile('^.*' + re.escape(rule.d_prefix) + '(.*)' + re.escape(rule.d_suffix) + '$')
    m = r.match(dependency)
    if m:
        return rule.t_prefix + m.group(1) + rule.t_suffix
    return None

def gen_targets(root, rule):
    for d, _, fs in os.walk(root):
        for f in fs:
            match = rule_match(rule, dependency=os.path.join(d, f))
            if match:
                yield match

def parse_args(argv):
    p = argparse.ArgumentParser(argv, description='purpose: list all targets that could be generated by a single pattern rule')
    p.add_argument('--rule', required=True, type=parse_make_pattern_rule, help='a Make pattern rule. e.g. "foo/%.o:    barr/%.cc"')
    p.add_argument('--root', required=True, help='root filesystem search path, used to hunt for targets')
    return p.parse_args()

def main():
    args = parse_args(sys.argv[1:])
    targets = gen_targets(root=args.root, rule=args.rule)
    for t in targets:
        print(t)

if __name__ == '__main__':
    main()
